<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[import, export, export default??? 还是 require, exports, module.exports???]]></title>
    <url>%2F2018%2F01%2F11%2Fimport-export-export-default-%E8%BF%98%E6%98%AF-require-exports-module-exports%2F</url>
    <content type="text"><![CDATA[晕了晕了 基本概念要弄清楚这些东西，首先得知道，它们属于两组不同的规范！require, exports, module.exports属于CommonJS规范！，而import, export, export default属于ES6语法 CommonJS规范Node.js采用的就是这个规范。require方法用于加载模块。由于在Node.js中，每个文件都是一个模块，都有一个自己的作用域。在每个模块内部，module变量代表当前模块，这个模块是一个对象，它的exports属性（module.exports）是对外的接口。为了方便，Node为每个模块提供一个exports变量，指向module.exports。这等同于在每个模块头部，有这样一行命令：1var exports = module.exports; ES6模块规范ES6采用import和export来导入、导出模块。export和export default在写法上有一些区别，一个个是导出一个个单独的接口，一个是默认导出整个接口。若使用export导出，在使用import命令的时候，用户需要知道说加载的变量名或函数名，否则无法加载。用export default命令，可以不用知道有哪些具体的暴露接口名，用文件名就可以123456// test1.jsvar f = &apos;12&apos;var n = &apos;23&apos;export &#123;f, n&#125; 1import &#123;f, n&#125; from &apos;./test1&apos;;]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[睡个好觉吧]]></title>
    <url>%2F2018%2F01%2F05%2F%E7%9D%A1%E4%B8%AA%E5%A5%BD%E8%A7%89%E5%90%A7%2F</url>
    <content type="text"><![CDATA[睡觉啦~zzz 一、 被误会的睡眠睡觉，占据了我们生活约1/3的时间，每个人的睡眠时间有长有短。平均而言约为8小时。过长过短都会增加肥胖、糖尿病和心血管疾病的风险。 然而，睡觉时间长短并非一成不变的，8小时仅仅只是一个平均值，顺着感觉来即可，不必拘泥于这个数字。 在人的一生当中，睡觉长短和入眠时间都会发生一些变化。学龄儿童（8-13）每天需要睡9-11小时、青少年（14-17）则为8-10小时，他们睡觉的时间比一般的成年人要长不少。更重要的是，小时候8-9点就可以上床睡觉了，青少年时期就自动延长到了11-12点。这是由于青少年的生理因素决定的，并不是故意偷懒不睡觉不起床的啦。 对于老人而言，其实睡眠时间并不会随着年龄的增大而减少。我们主观感受到老人睡得早睡得少是由生理因素和病理因素共同决定的。睡眠轻、夜里醒来次数多是老人睡眠的一个特点。一个睡眠周期包含非快速眼动期（NREM）和快速眼动期（REM），非快速眼动期又可以简单分成浅层睡眠和深层睡眠，一个周期大概为90分钟，我们夜里的睡眠就是由这一个个周期组成的。老年人的深层睡眠少，浅层睡眠时间相应增加，并易从浅层睡眠中惊醒 平时休息的时间就不多，其实真的可以通过周末来补觉的！ 二、 重新认识睡眠为什么我们每个人到了晚上都要睡觉呢？无数的神经科学家花费了大量的时间来寻找答案，然而，我们依旧无法说出准确而又全面的原因，以下为目前流行的观点假说： 1. 节律——为了适应生存的环境四季更替，日出日落，潮涨潮落，我们生活的地球是一个充满节律的环境。动物为了生存下来，就必须适应环境，适应环境的节律。睡眠，并不是人类独有的属性，它在所有的高等脊椎动物中都存在。 2. 睡眠可能带来的好处 a. 恢复理论——睡觉像是在和大脑洗个澡 白天我们消耗了大量的精力，需要睡眠来休息和恢复，更新一些体内重要的物质 b. 适应理论——躲避伤害，节省能量 这个理论是说，睡眠是机体适应环境的一种行为，睡眠是在让机体脱离困境，在脆弱的时候避开天敌或者其他有害的因素，同时节省能量。比较没说服力 c. 记忆巩固理论——更好地存储信息 睡眠，不但对记忆很重要，而且是一种特殊选择方式。睡眠和做梦都有帮助我们筛选记忆中的信息，存储重要的内容 d. 帮助消除负面情绪 睡一觉起来，好像很重要很在意的东西都没那么严重了呢。这是由于在一次次的睡眠中，事件记忆得到巩固，然而情感记忆本身没有加强，到最后，就只剩下对事件本身信息的记忆了 可是，你又是怎么睡着的呢？ 睡觉，可没有想象中那么简单哦，并不能简单的分成睡着和醒来两种状态。睡眠是人的一种节律，它有自己的节奏，它的节奏通过睡眠周期（sleep cycle）来体现 3. 睡眠周期 浅层睡眠 浅层睡眠包含两个阶段，第一阶段（stage 1）大约发生在我们入睡10分钟之内，这个阶段并不算真正的睡眠，只是在清醒和睡眠之间的一个过渡期，也就是所谓打瞌睡的阶段，大概占据全部睡眠时间的5%。在这个时候，呼吸会更加缓慢，肌肉放松，心率下降，艺术家常常通过这个阶段寻找灵感 正常情况下，我们很快就进入了睡眠的第二阶段（stage 2），这个阶段逐渐失去了对外界的反应，有些人开始打鼾==，此阶段大概占据了50%的全部睡眠时间。此时我们不容易被其他一些因素唤醒，比如噪声和饥饿。虽说如此，还是很容易醒来== 深层睡眠 大约20分钟后，我们就会进入更深的第三及第四阶段（stage 3 and stage 4）。这时，我们就很难醒来啦，若在此阶段被唤醒，就会昏昏沉沉、思维混乱并持续一段时间。约占20%的睡眠时间。 RAM 睡眠 在进入深度睡眠30分钟之后，我们就会进入快速眼动睡眠（rapid eye movement）阶段，简称REM睡眠阶段，又称作做梦睡眠。在这个阶段中，眼球在眼皮下快速运动，脑内负责视觉的区域异常活跃，于是我们会产生强烈的视觉映像，这种映像会以梦的形式呈现。然而，我们的骨骼肌肉处于瘫痪的状态，就像是一颗活跃的大脑处在瘫痪的身体中，约占20%全部时间。在此阶段结束之后，睡眠周期又回到了第一阶段，此时就容易醒来了 我们在睡觉时，NREM-REM-NREM这一周期变化在夜里要反复好几次，每次大概90分钟左右。以一般正常睡眠时间8小时来算，每晚就至少得经历5次循环。通过对睡眠阶段的了解，我们可以解释很多生活中有趣的现象。 比如有时被闹钟惊醒，不好的状态可能会持续一段时间，这就很有可能是在深度睡眠阶段被吵醒。再比如说，鬼压床的现象，就是通常发生在我们刚进入睡眠或将刚醒未醒阶段，即被干扰的REM睡眠 三、 写给被睡眠困扰 安眠药 安眠药一般只适用于严重失眠的人群使用，而且只适合短期服用。而失眠的行为疗法又不是很普及。 世界上第一款安眠药叫巴比妥（barbitone）。20世纪60年代苯二氮卓类（benzodiazepines）上市，包括地西泮（diazepam）和替马西泮（temazepam）。当今安眠药被称为非苯二氮平类（non-benzodiazepines），包括唑吡坦（zolpidem）、佐匹克隆（zopiclone）和扎来普隆（zaleplon），统称为Z类安眠药，因为名字都是Z开头的== 这些安眠药的机制都是相似的，它们可以和大脑内的r-氨基丁酸（GABA）受体结合。GABA是大脑内主要的抑制型神经递质，可以降低脑细胞活性。然而GABA在脑内涉及到的功能太多，影响它就会带来一系列的副作用。长期用药容易产生依赖性，停止用药则会有很强的戒断反应 除了失眠之外，剩下大多数缺少睡眠的人其实是有能力好好睡觉的，而是不愿意去睡觉==，也就是所谓的睡眠剥夺。长期处于睡眠剥夺的情况下对身体有严重危害 四、 今晚睡个好觉哦获取高质量睡眠的质量是每个人都希望得到的，其实，想要获得足够的睡眠质量，温度是关键的因素之一。温度和睡眠紧密相关，因为体温调节和睡眠调节的机制有关。环境温度太高或太低的时候，人的睡眠都会受到影响。良好的睡眠环境，通常床铺的温度在32℃到34℃，湿度在40%到60%。在睡觉前可以洗一个热水澡，降低身体的核心温度，再比如睡觉时把脚放在被子外面，有助于散热。 为什么会睡不好呢？ 睡眠质量不好，有许多可能的原因。也许是身体不适，亦或是生活压力和情绪的原因等。更好的做法是等到困了再去睡觉，而不是强迫自己睡觉。 改善睡眠的小tips 不要担心，不要刻意去睡觉，累了才上床睡觉 睡前4小时内不要吃含咖啡因的食物，例如咖啡、茶、巧克力等等 增加运动量，可以多做点工作，或者多运动健身 平时下午不困的话，中午就不要睡午觉；睡午觉的时间也以半小时之内为宜 按固定的时间睡觉和起床 如果是刚结束紧张的工作，不要马上睡觉，最好做一些缓冲步骤，比如刷牙、看几页书等等，来暗示自己快要睡觉了 若半小时还没有睡意，就起床。看看专业书，背背单词等！ 不要在床上看电视看书、在没有睡觉的时候就不要待在床上 小睡前可以喝一杯咖啡，咖啡因起效时间大概在25分钟之后，差不多正好是醒来的时间，可以让你在小睡后马上清醒 手环手表等是如何监测睡眠的呢？ 准确性如何呢？其实手环、手表类的装置被称为腕动计，也就是通过手腕的活动来监测和记录人体的活动。原理其实很简单：一定程度的手腕活动，代表人处于清醒状态；长时间的手腕静止，表示人处于睡眠状态。此类仪器准确性虽然比不上实验室设备，但某些指标方面准确度还是很不错的！]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA["Javascript"学习笔记之--导论]]></title>
    <url>%2F2017%2F12%2F25%2FJavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%AF%BC%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[JavaScript究竟是一门怎样的语言呢？ 一、 什么是JavaScript语言呢？ JavaScript是一种轻量级的脚本语言所谓的脚本语言，指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序的“脚本”。 JavaScript是一种嵌入式（embedded）语言语言本身提供的语法并不多，自身不提供I/O相关的API，都是靠宿主环境提供（浏览器，Node），因此JavaScript只适合嵌入更大型的应用程序环境，去调用宿主环境提供的底层的API。 JavaScript是一种“对象模型”语言从语法角度看，JavaScript是一种“对象模型”语言，然而却不是纯粹的“面向对象语言”，还支持其他编程范式（比如函数式编程）。这就导致几乎任何一个问题，JavaScript有多种解决方法。很灵活。 二、 JavaScript的组成部分JavaScript的核心语法相当精简，只有两个部分： 基本语法（操作符、控制结构、语句） 标准库（各种对象：Array、Date、Math等） 其他就是使用环境宿主提供的额外的API。在浏览器中，它提供了额外API可以分成三大类。 浏览器API：操作浏览器 DOM类：操作网页的各种元素 Web类：实现互联网的各种功能 若宿主是服务器，这提供操作系统的各种API，比如文件操作、网络通信API等。 三、 为什么学习JavaScript呢？ 操控浏览器的能力 浏览器平台化：可以调用许多系统功能，如操作本地文件、操作图片、调用摄像头和麦克风等！！！ Node.js 数据库操作。NoSQL数据库的概念本身就是在JSON（JavaScript Object Notation）格式的基础上诞生的，大部分NoSQL数据库允许JavaScript直接操作 跨移动平台！！！React Native 跨桌面平台！！！ 简单，与主流语言的相似性 四、 优点 灵活的语法，表达力强 可直接编译运行 事件驱动和非阻塞式设计。适合高并发环境，普通的硬件就可以承受很大的访问量 五、 缺点 设计缺陷，某些地方不合理 某些程序员感到，这语言不行啊，得发明新的语言，CoffeeScript、TypeScript、Dart等语言发明的目的，多多少少都有这个因素]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA["network principles" 学习笔记之--无线和移动网络]]></title>
    <url>%2F2017%2F12%2F05%2Fnetwork_principles-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%97%A0%E7%BA%BF%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[有关于WiFi的一点理论基础 无线设备在我们生活中扮演者越来越重要的角色。这不仅仅要归功于手机的发展和普及，更要感谢科技的发展和创新。然而技术的发展也并非一帆风顺，在无线网络的发展过程中，我们面临着两大挑战： 无线性（wireless）：通过无线链路进行交流 移动性（mobility）：用户可能会不断的改变自己的地理位置，网络的接入点可能会因此发生变化 一、IEEE 802.11 Wireless LANIEEE 802.11 无线 LAN 在当今无疑成为了无线局域网中的赢家，它还有另外一个耳熟能详的称号：WiFi。它其实有好几套标准：802.11b、802.11a、802.11g、802.11n等等。其中802.11g是至今为止最为流行的技术。一些双模式（802.11a/g）和三模式等也在一些设备上提供使用。他们之间的差异在于所使用的频段和支持的最大速度有所差异。 1. 802.11 LAN architecture802.11体系结构的基本构建模块是基本服务集（basic Service Set，BSS），一个BSS包含一个或多个接入点（Access Point，AP）的中央基站（base station）和多个无线主机（wireless host），它们连接到一个互联设备上（交换机或路由器），互联设备又连接到互联网上。 2. Channels, association在无线主机需要联网之前，需要和一个接入点有所关联。简单来说，我们手机需要在可用网络中查找到某一个WiFi信号（管理员配置的服务集标识符（Service Set Identifie, SSID）），连接。关联意味着手机和该无线站点之间创建了一个虚拟线路。可问题是，你的手机是如何知道哪个AP位于WiFi丛林（WiFi jungle）中的呢（哪些WiFi是可用的呢）？ 802.11要求，每个AP周期的发送信标帧（beacon frame），每个信标帧包括该AP的SSID和MAC地址。在802.11b中，2.4GHz-2.485GHz的频段会被分成11个部分重叠的信道。设备通过扫描该频段，接收到信标帧了解到AP之后，就可以选择一个AP用于关联了。 扫描信道和监听信标帧的过程被称为被动扫描（passive scanning）。我们也可以进行主动扫描，主动扫描是无线主机向范围内的所有AP发送广播探测帧完成的，收到请求帧的AP用一个响应帧应答主机。主机可以在响应的AP中选择一个与之关联。在这里需要二次握手的过程，这样才能AP才知道是否选择了它嘛。 有些时候，我们需要向AP鉴别自身。在一些公司中，通过MAC地址的判断允许其接入网络；在我们生活中，常常采用用户名和密码的方式鉴别自身。 作为用户，我们通常选择具有最强信号的信标帧，然而，这也许并不是最佳选择。因为该AP可能被其他附属主机（共享该AP的无线带宽）所过载。 3. 802.11 MAC Protocol: CSMA/CA若多个节点要同时传送数据，占用了同一个信道该怎么办呢？由于隐藏终端和衰减问题的存在，IEEE 802.11放弃了在以太网中使用的碰撞检测方式，使用了带碰撞避免的CSMA（CSMA/CA）]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA["information security" 学习笔记（1）]]></title>
    <url>%2F2017%2F12%2F03%2Finformation_security-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[未完待续… 信息安全（information security），一直以来在我们生活中扮演着极其重要的角色。随着互联网的发展和普及，在网络上安全可靠的传输数据是十分必要且重要的。密码学，作为信息安全中最重要的技术，在我们睡觉醒来打开手机的那一刻起，我们就在使用着它。信息安全可以说和我们生活密切相关，已然成为不可分割的一部分。 1. Security Rulea. don’t roll your own在每一本安全书的开头，必然都会告知读者，don’t roll your own!!! 这仿佛在说，你个辣鸡好好学习其他人的算法就好，别整天想着整什么幺蛾子，你想出的算法，那必然是极其不可靠的，现在世界上已经有那么多成熟的经过历史验证的算法了，为啥不用呢？？ b. Kerckhoff’s principle。kerckhoff 这家伙说，一个加密系统（cryptosystem）的安全性在于密钥（key）的保密，而不是其他人不知道这个算法。这也就是说，即使一个算法众人皆知，也需要保证安全性。 c. Don’t assume something has a certain form unless you check it不要假设某种东西有特定的模式，除非你去验证它。就如邓小平同志所言，实践是检验真理的唯一标准~ 2. Historical Ciphers在历史上，我们的祖先为了保证信息的安全，想出了各式各样奇奇怪怪有趣的算法： a. Caesar Cipher 没错，这个算法就是著名的凯撒大帝发明的。这个算法很单纯，加密时将每个字母向后移3位，e.g: A -&gt; D。解密时向回移三位就好了。 缺点在于，其他人一旦知道这个算法，这个算法就完全没有任何可靠性而言了。 b. Vigenere Cipher 这个算法发明于19世纪文艺复兴时期。这个算法加密用到了密码，这个密码可能只是一个单词或者一个短语。加密时，将原文和密码相加，之后将得到的结果模26取余。 c. Enigma 这是第二次世界大战德军使用的经典密码，具体的加解密过程就不再赘述了，有点小复杂，详情可见以下链接。 Enigma介绍–百度百科 3. important concept在进入现代信息安全编码之前，有一些重要概念需要有所认识。 a. Brute-force attack b. Bits of security c. Negligible quantity d. Indistinguishability e. Pseudo-random functions f. Pseudo-random permutations g. Oracles Encryption Oracle Decryption Oracle Random Oracle Padding Oracle]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA["network principles" 学习笔记之--广播链路]]></title>
    <url>%2F2017%2F12%2F03%2Fnetwork_principles-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%BF%E6%92%AD%E9%93%BE%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[在一条信道上，多个节点都想要传输数据，这时候该怎么办呢？ 在计算机网络中，有两种网络链路：点对点链路（point-to-point link）、广播链路（broadcast link）。 其中的广播链路，目的是为了让不同的的节点（nodes）能够使用同一条广播信道。然而，多个节点在同一链路中进行数据传输，可能会发生信号碰撞（collision），为了解决这一的问题，需要通过多路访问协议（multiple access protocol）来规范节点在共享广播信道上的传输行为。 理想情况下，我们希望一条具有R bps速率的广播信道有以下特征： 在只有一个节点发送数据时，该节点具有R bps的吞吐量 在M个节点发送数据时，每个节点的吞吐量为R/M bps 协议是分散的，不会因为其中一个节点的崩溃而影响整个系统；同时，不需要数据同步，否则就是不分散的（例如之后会提到的时隙ALOHA） 协议是简单的 然而，事情远没有想象中的那么简单。在现实生活中，已实现的协议或多或少都有一些缺陷。我们可以将已实现的各种多路访问协议划分成三类： 信道划分协议（channel partitioning protocol） 随机接入协议（random access protocol） 轮流协议（taking-turns protocol） 信道划分协议信道划分协议就是把信道分成小片，之后再把每片的资源分配给不同的节点，这里的小片可以是时间、频率等。 时分多路复用（time division multiple access，TDMA），将时间划分成时间帧（frame），并进一步划分每个时间帧为N个时隙（slot），然后把每个时隙分配给N个节点中的一个 频分多路复用（frequency division multiple access，FDMA），将R bps的信道划分成N个频段，每一频段具有R/N带宽，然后把每个频率分配给N个节点中的一个 这两者大同小异，主要的缺陷在于：节点的发送速率被限制，即使只有一个节点 随机接入协议在随机协议中，一个传输节点是以整个信道的全部速率进行发送。当发生碰撞时，发生碰撞的节点反复的发送它的帧（不必立刻重发，独立产生随机重发时延），直到该帧无碰撞的通过为止。 时隙ALOHA（slotted ALOHA） 这是最简单的随机接入协议。我们假设所有帧的大小都是相同的、时间被划分成同样大小的时隙（传输一帧的时间），并且所有的节点只能在时隙开始时传输。 若没有发生碰撞，节点可以在下一个时隙发送新帧；否则以p概率重传，直到成功。 我们可以计算下该方式的最大效率，计算过程省略…结论是1/e = 0.37，其实效率并不高。除此之外，另一个问题在于节点是需要同步的。需要知道时隙开始的时间，需要在时隙结束前检测到是否发生碰撞事件。 纯ALOHA（pure ALOHA） 这是一个非时隙、完全分散的协议。当新的一帧首次到来时，节点立刻将该帧完整的传输进广播信道。若受到碰撞，则立即以概率p重传该帧，否则等待一个帧传输时间。在等待结束之后，以概率p该帧，1-p保持空闲。 这样的传输效率为1/2e，为时隙ALOHA的一半。 载波侦听多路访问（carrier sense multiple access, CSMA） 主要的两个规则： 载波侦听（carrier sensing），即一个节点在传输前先听信道。若其他节点正在发，则等待一段随机的时间后再侦听信道。空闲了当然就可以发送啦。 碰撞检测（CSMA/CD collision detection），若同时发送，则同时停止。一个传输节点在传输时一直在监听信道，若检测到另一节点正在传送，则双方都停止传输。 轮流协议 轮询协议（polling protocol）要求节点之一成为主节点，主节点以循环的方式轮询（poll）每个节点。优势在于消除了随机接入的碰撞和空时隙，效率更高。坏处在于引入了轮询时延，并且在单点故障时会对系统造成影响。 令牌传递协议（token-passing protocol）。这个协议中并不存在主节点，一个特殊的令牌（token）在节点中传递。当节点想要发送一些帧并且持有令牌时才可发送到信道中，否则传递给下一个节点。但存在单点故障和节点忘记释放令牌的缺点。]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[感冒那些事儿]]></title>
    <url>%2F2017%2F09%2F03%2F%E6%84%9F%E5%86%92%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%2F</url>
    <content type="text"><![CDATA[得了普通感冒该怎么办呢？该不该去医院呢？需要常备哪些靠谱的感冒药呢？ 今天一大早，我就收到来自小伙伴xxx发来的消息，哭诉着感冒的难受和不便…然而对于如何应对感冒，他竟然没啥想法==…我是时候放一些干货出来了。 普通感冒是一种常见的疾病，【成年人每年都会得2-6次】，每次感冒我们都饱受其摧残=。=。因此，正确的看待感冒，了解感冒，是十分重要的。 一、 关于感冒的三个真相美国威斯康星大学医学与公共卫生学院在2010年发布了一份《感冒白皮书》，为人们揭示了一个真实的感冒： 感冒是一种由病毒引起的【上呼吸道感染“综合征”】，超过100种以上的病毒可以引发感冒。 一般来说，【感冒的症状会持续一个星期左右，无论服药与否】。 【感冒的起点，是在出现症状的前一天】，那时病毒已在你的体内驻扎。 二、 个结论根据《感冒白皮书》所言，我们可以得出以下结论： 感冒是由多种病毒引起的，然而我们并没有杀死这些病毒的药物。也就是说，现阶段的大多数药物仅仅只是用来【缓解感冒带来的各种不适症状】，而非治疗，最终感冒好了靠的是自身的免疫力。 感冒的根源是【病毒】，而非【细菌】，因此抗生素对于感冒根源的治疗没有帮助（但是抗生素对炎症的治疗，一些继发感染症状有积极效果）。 正是因为能够引起感冒的病毒种类繁多，因此难以研制出可以对抗所有感冒的疫苗。 感冒具有自限性，感冒药并非吃的越多好的越快，在没有影响到正常生活的前提下【可以不吃】。乱吃药不如好好休息，多喝水，耐心的等待他过去。 感冒并非是冻出来的，是由于自身【免疫力下降】让病毒有机可乘。 三、 常见的药物成分药品什么的家里一大堆了吗？看到说明书的时候是不是一脸懵逼呢…可以看看以下常见的有效成分哦。 对乙酰氨基酚（扑热息痛）：该品为【解热镇痛药】，能够抑制中枢神经系统前列腺素的合成。 右美沙芬：【止咳】，干咳使用。 伪麻黄碱：【减少鼻涕，缓解鼻塞】，（但须注意，买含有伪麻黄碱的药物需要带上身份证，需要备案，因为据说这种成分可以用于制冰毒==）。 咖啡因：【提神，解热止痛】。 马来酸氯苯那敏（扑尔敏）：【缓解流涕，喷嚏 】，但有嗜睡副作用。 四、 药物的选择在上面也有说到，现阶段的感冒药只适用于感冒症状的缓解，并没有治疗效果。但这并不意味着感冒的你不需要吃药，普通感冒转肺炎、支气管炎的人又不是没有…因此了解自身症状，对症治疗，是十分重要的。切记不可重复用药： 白加黑，泰诺白加黑是我居家旅行必备药物。其中有效成分为“对乙酰氨基酚”，“右美沙芬”，“伪麻黄碱”。夜间片中加入了“盐酸苯海拉明”，它能够消除各种过敏症状。总的来说，白加黑成分简单，效果良好。泰诺是精简版的白加黑，两者成分种类几乎一致，只是泰诺中的有效成分含量更少，有效成分约为【1/10】，适合感冒症状不严重的患者或者儿童患者使用。 感康，快克这些药物除了常见的成分之外，还加入了“人工牛黄”和“金刚烷胺”。人工牛黄可以清热化痰，金刚烷胺可以抗病毒。 新康泰克红蓝两兄弟蓝色装的兄弟只含有“盐酸伪麻黄碱”和“扑尔敏”，在【感冒初期】使用即可有效缓解感冒症状，又可避免药效过猛。红色装的兄弟含有“对乙酰氨基酚”，“右美沙芬”，“伪麻黄碱”，“扑尔敏”，推荐在有【发热现象】的严重感冒时使用。 啥，你问为啥没有中成药推荐？那些奇奇怪怪的中草药，有效成分是什么物质也不知道，说明书上一堆【无】…快醒醒吧少年。 具体要使用什么药物，还得按照自己的症状分析，严重了还是去医院吧。 五、 一些有用的tips 打开加湿器。干燥的环境容易引发感冒，也会让呼吸道感到不适。若没有加湿器，也可以在身边放一杯水，蒸发的水汽会对感冒症状的缓解有所帮助。 缓解咳嗽方法。【巧克力】中含有可可碱，有一定的缓解咳嗽效果，记得是黑的！此外，有一个止咳的特效穴位，叫做【少商穴】（位置如下图），用力的掐紧30s+，咳嗽症状即可快速缓解。亲测有效。 快速缓解鼻塞猛搓尾骨10秒，速度要快。 啥，问我原理？并不知道，我只是个孩子。 平时可以补充些VCVC是否可以治疗或者预防感冒，众说纷纭，我也不知道…不过每天适当补充些VC对身体还是有积极帮助的，尤其是对于每天摄入蔬菜和水果不足的人们。吃之前记得在心中默默的祈祷，希望它对感冒有用的==。 好好休息，多喝水这不用说都知道了吧… 结尾，以上只适用以普通感冒，得了流感？还不快去医院！！]]></content>
      <categories>
        <category>医学</category>
      </categories>
      <tags>
        <tag>感冒</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阅读的艺术]]></title>
    <url>%2F2017%2F09%2F02%2F%E9%98%85%E8%AF%BB%E7%9A%84%E8%89%BA%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[阅读目的不是提高阅读速度，而是建立知识体系。阅读速度的提升，一方面是知识体系越来越完善的结果。 曾几何时，琳琅满目的书籍已然充斥于我们的生活，种类繁多，应接不暇。 手机上，微信、知乎、微博、今日头条等休闲阅读正蚕食着我们宝贵的时间。朋友圈中，常常充斥着阅读目标、阅读数目等图文，其中不乏数量惊人的鸡汤书籍。 这种现象不禁让我感慨，「阅读，到底是为了什么？为了休闲？亦或是为了炫耀？」 阅读已逐渐成为一种快餐文化，能够静下心来阅读的人们越来越少，回归阅读的本质，是十分重要且必要的。 一、 明确阅读的意义读书，从来不是以数目为目的的，读书的数量和一个人的学识修养也并非成正比。 俗话说的好，学以致用，说的就是能够把自己所学的知识运用到生活中，对我们的生活起到积极的影响。 但是，道理我都懂，待到实践之时却无处下手，或根本想不起来！ 这样的现象并不少见，因为「知识并不在你的体系之中」，亦或是「学而不思则罔」。 为了解决这种困境，以输出为目的的阅读学习，不失为一种好方法，也是我现在正在做的（正式微笑脸）。 1. 对知识进行收集整理，纳入体系之中不以规矩，不成方圆。不加整理归纳，知识都不是你的。 大学本科四年，我的笔记写了不少，每学期都有厚厚的一大本，其中有好些排版精致，书写认真。然而，其中多数在毕业之后因不便携带、物理磨损等因素弃之，不免令人心生怜惜。因此，电子笔记成为我目前主要的收集整理方式。在众多笔记工具之中，OneNote，成为我学习工作的得力助手。借助于office对于笔记需求的优秀解决方案，在生活中遇到有用的知识，我都能快速记录，闲时加以整理。 2. 书写是为了更好的思考书写是一种记录，是一种回顾，是一次次的反思。 在高中，老师常常教导我们，教其他人做题，是非常好的一种学习方式。这不仅可以增进友谊，还能让知识更加深刻。书写，本质上和教别人做题是一样的，都是一种输出。这种方式的学习，可以有效的绕开“以为懂了但其实并没懂”的怪圈。同时，在书写的过程当中，积极的整理资料，理顺逻辑关系，对于形成批判性思维大有益处。 3. 践行才是最终目标纸上得来终觉浅，绝知此事要躬行。 列宁曾教导我们：不要做语言的巨人，行动的矮子。写的、说的总是比行动来的简单，认识到的、意识到的东西终归是浅薄的，想要认识事物的本质，还得靠自身的实践。 二、 阅读？应该读些啥？阅读，本质上和吃饭是一样的。（以下观点适用于大多数学生） 每个人的饭量都不同，每个人的阅读速度，阅读能力也不同。但是，阅读和吃饭一样，都需要均衡搭配，切记不可因噎废食，抑或心想一口吃个大胖子。 1. 专业类书籍专业类书籍就像米饭，为人生提供基本的养料。 专业知识是生活的立足之本。我今后希望成为一个全栈工程师+设计师，因此，对于处在学习阶段的我，前后端和设计的相关知识都是每天必须学习滴（好惭愧啊==）。对于其他专业领域，我也会涉猎，寻找到自己感兴趣的部分。心理学，医学，投资理财等知识可以为生活增添不少色彩。 2. 方法论类书籍方法类的书籍就像肉类，蔬菜，补充生活所需各种营养。 这类书籍能够为我们的学习生活带来充足的动力。方法论不仅可以打破你原有的认知，还给了你背后的原理。如《学会提问》，《暗时间》，他们告诉了我们获得知识的渠道，判断知识真伪的方法，让学习生活更加有效率。 方法论类书籍和专业类书籍对于涉世未深的大多数学生而言是安身立命的根本，应该优先选择。 3. 文学类书籍文学类书籍就像水果，餐后些许即可。 其实我一直挺庆幸的，福建卷高考语文要求考名著。在高考的大氛围之下，我阅读了好些名著经典，如《红楼梦》，《三国演义》，《巴黎圣母院》，《复活》等。说实话，书中好多情节我都记不住了。但是，优秀的文学作品给予人的影响是潜移默化的，我仿佛也见识了百态人生，逐渐明晰知道自己要的是什么，希望过着怎样的生活。 文学类作品固然好，但是切记不可本末倒置。 4. 鸡汤类书籍鸡汤类书籍就像快餐，少吃，或者干脆就别吃了 听到鸡汤，很多人原则上倒是保持的挺一致的，反对，鄙夷。是在现实生活中，不少人依旧一边骂着鸡汤，一边喝着鸡汤。鸡汤的确可以为在阅读中的你带来些动力，然后，就没有然后了…更有甚者，以毒鸡汤为食，三观逐渐扭曲，令人惋惜。 三、 错误的阅读姿势在许多描述“快速阅读法”的书籍中，充斥着这样的速读方式： 加速眼球在纸面上的跳动，增加眼球停顿之间的宽度，就能让你读得飞快。 消灭默读、消灭阅读时文字在脑海里的声音，就可以读得更快。 我可以负责任的说，这些都是TM是错的。 然而有些小伙伴可能觉得，这些方法并非不可取，我的阅读速度的确变快了呢？ 造成这样错觉的原因有三个： 注意力提升了 安慰剂效应 阅读速度并不等同于理解速度 这两个观点都有十分严重的逻辑错误。眼球停顿宽度宽是快速阅读的结果，而不是快速阅读的原因！默读不可消除，快速阅读的人只是默读的更快罢了。 但为何谣言不止，许多人苦苦追求呢？原因很简单，利益的驱使使得商人宣传无用信息，人们对知识的焦虑加速了谣言的传播。 四、 正确的阅读姿势正确的阅读姿势，是需要讲究效率的，重要的是需要提升阅读的质量和素质。 1. 专注力对于提升阅读质量的贡献毋庸置疑。良好的专注行为能够有效消除干扰因素，减少切换成本。在阅读学习中，若一个人常常被琐碎之事打断，例如：电话铃声，游戏诱惑等，很难想象他可以有效率的完成自己阅读目标，找到学习状态。这是因为，大脑在处理不同事务之间转换是需要时间和代价的，这就是为什么工作状态一旦被打破难以找回的原因。 2. 提升自己的理解速度，也是有效提升阅读效率手段。这里的理解速度包括对文章术语理解，对篇章逻辑结构的理解，以及对全书逻辑结构的理解。 a. 术语的理解术语的理解意味着拥有相关背景知识，别无他法，只能认真积累，多用多复习。以此来构建起牢固的心理表征，选择靠谱的书籍，学习没学过的，拓展已经知道的。 b. 篇章逻辑结构的理解这需要把握文章在该部分的分论点，作者用了哪些论据，支持了哪些观点。在这部分可以充分的利用逻辑关系进行跳读。篇章阅读分成三个部分： 证实 修正 拓展 对于已证实的论点，直接跳过。在文章内容与预期相反时，常识站在该角度进行修正，看论据是否支持该论点。若论据完美支持论点，恭喜你，学到新知识了。 c. 全书逻辑结构的理解对全书逻辑的识别，分成以下5个步骤。 全书描述的核心问题是什么？ 对于这个核心问题，作者的观点是什么？有什么依据呢？ 对于这个核心问题，其他人有什么别的看法？依据是什么？ 两者相比较，哪一方的观点更有道理？为什么？ 作为读者，你怎么看待这个问题？ 以上5步，既是论文的常见阅读方法，也是一篇优秀读后感的写作步骤。在阅读时带着问题，有目的的阅读，积极的寻找观点，这样主动阅读方式定会对全书逻辑结构理解有所帮助。 五、 写在最后的话阅读这个话题，本身就是极其复杂，情况多变，难以通过一篇文章就能够完事儿。 尽管如此，我还是尽量希望通过自己对阅读的理解，尽量的给予需要的人一点帮助。 最后，请牢记： 阅读目的不是提高阅读速度，而是建立知识体系。阅读速度的提升，一方面是知识体系越来越完善的结果。 共勉。]]></content>
      <categories>
        <category>效率</category>
      </categories>
      <tags>
        <tag>read</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我很好，你呢？]]></title>
    <url>%2F2017%2F07%2F01%2F%E6%88%91%E5%BE%88%E5%A5%BD%EF%BC%8C%E4%BD%A0%E5%91%A2%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[灯还亮着，难道不是吗？ 又一次从睡梦中惊醒，带着思念与牵挂，多么想再和你见一面啊，我真的，想你了 也许我是属于后知后觉的那种，等到失去了才懂得要去珍惜 这不知是最近的第几次了，每当睡意渐浓就会浮现你的脸庞，那么亲切，对我的爱与关心 窗外的雨连绵不绝的想了好几天了，偌大的房子不见你的身影 我也总是一副没长大的样子，事事总需要你的担忧 也不知从何时起，我们之间沟通起了障碍 我爱你这句话到最后也没说出口，我后悔，自责 也许吧，人都是要向前看的，但我知道，思念不忘 中国闭关锁国令人寒心，我将要飞洋过海寻找自己的生活 也许，你那小小的愿望我也难以实现 但我知道，只要我过的幸福，你一定会为我感到高兴的吧 只有变得更加优秀，才能实现自己的规划与梦想 我也会把握好这千载难逢的好机会，因为，我真的，为我国感到心寒 你的坚强将会成为我的榜样，不管未来生活多么艰辛，我也会努力克服，追寻人生真谛 正如歌中唱到： 不关心我有什么 只在乎我爱什么用不着的一切谁来打扫幸福就像穿鞋子 不舒服的 都只是脚镣倒不如去赤脚奔跑不担心缺少什么 只知道追求什么别让我梦想 给世界颠倒属于我的那杯茶 要什么味道没最好 要刚好只能由自己来调我过我要的生活 不是生活过我就好只要是我想要的 期待多久都有情调不该我吃的 懒得管它是否酸的葡萄对别人爱的甜点 报以微笑我拥有时间 不是时间拥有我的通告我做想做的事情 忙碌也是一种逍遥投我所好 倘若有希望就有失望享受那些烦恼 感受我想要的味道没什么重不重要 只在乎需不需要不合适的音乐别来骚扰哪怕外面再热闹 没被感动到我宁可 一个人 无声无息中睡着我过我要的生活 不是生活过我就好只要是我想要的 期待多久都有情调不该我吃的 懒得管它是否酸的葡萄对别人爱的甜点 报以微笑我拥有时间 不是时间拥有我的通告我做想做的事情 忙碌也是一种逍遥投我所好 倘若有希望就有失望享受那些烦恼 人生没有烦恼多无聊我过我要的生活 不是生活过我就好只要是我想要的 期待多久都有情调不该我吃的 懒得管它是否酸的葡萄对别人爱的甜点 报以微笑我拥有时间 不是时间拥有我的通告我做想做的事情 忙碌也是一种逍遥投我所好 倘若有希望就有失望享受那些烦恼 感受我想要的味道]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>mood</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端一些容易混淆的概念]]></title>
    <url>%2F2017%2F04%2F08%2F%E5%89%8D%E7%AB%AF%E4%B8%80%E4%BA%9B%E5%AE%B9%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[你要吃小饼干吗？一起来呀 npm script这个东西嘛，就是写在package.json文件里面，使用scripts字段定义的脚本文件在我看来就是用于简化一些命令行命令使用，直接使用npm run查询已有的命令123456&#123; //... &quot;scripts&quot;: &#123; &quot;build&quot;: &quot;node build.js&quot; &#125;&#125;原理：执行时创建一个shell，然后执行shell里的脚本，只要shell中能执行，就可以放到这里来用这个shell比较特别的是，会将node_modules/.bin下的目录加入path变量，这意味着可以直接使用里面的脚本！不必加上路径 通配符：*任意文件名；**任意一层子目录，防止被转义，要将星号转义\* 执行顺序：$平行执行；$$继发执行 默认值：npm start:node server.js前提是根目录下有server.js这个脚本；npm install 钩子：就是前后加一个预编译，编译后的状态吧。是public后才有意义？不明觉历 简写：有4个npm start;npm stop;npm test;npm restart 变量：反正有这个功能23333 1234567891011121314151617181920212223242526// 删除目录&quot;clean&quot;: &quot;rimraf dist/*&quot;,// 本地搭建一个 HTTP 服务&quot;serve&quot;: &quot;http-server -p 9090 dist/&quot;,// 打开浏览器&quot;open:dev&quot;: &quot;opener http://localhost:9090&quot;,// 实时刷新 &quot;livereload&quot;: &quot;live-reload --port 9091 dist/&quot;,// 构建 HTML 文件&quot;build:html&quot;: &quot;jade index.jade &gt; dist/index.html&quot;,// 只要 CSS 文件有变动，就重新执行构建&quot;watch:css&quot;: &quot;watch &apos;npm run build:css&apos; assets/styles/&quot;,// 只要 HTML 文件有变动，就重新执行构建&quot;watch:html&quot;: &quot;watch &apos;npm run build:html&apos; assets/html&quot;,// 部署到 Amazon S3&quot;deploy:prod&quot;: &quot;s3-cli sync ./dist/ s3://example-com/prod-site/&quot;,// 构建 favicon&quot;build:favicon&quot;: &quot;node scripts/favicon.js&quot;, seajs, requirejs, webpack, browserifyseajs / require : 是一种在线”编译” 模块的方案，相当于在页面上加载一个 CMD/AMD 解释器。这样浏览器就认识了 define、exports、module 这些东西。也就实现了模块化。browserify / webpack : 是一个预编译模块的方案，相比于上面 ，这个方案更加智能。没用过browserify，这里以webpack为例。首先，它是预编译的，不需要在浏览器中加载解释器。另外，你在本地直接写JS，不管是 AMD / CMD / ES6 风格的模块化，它都能认识，并且编译成浏览器认识的JS。 gulp, grunt这两个都是优化前端工作流程；比如自动刷新页面、combo、压缩css，js、编译less等 AMD, CMD等 参考资料npm scripts使用指南]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vue.js(1)]]></title>
    <url>%2F2017%2F03%2F25%2Fvue-js-1%2F</url>
    <content type="text"><![CDATA[回家喽！ 几个关键词vue.js：数据驱动+组件化、MVVM、社区完善MVVM：针对复杂交互逻辑的前端应用、提供基础的架构抽象、通过Ajax数据持久化，保证前端用户体验spa单页应用，刷新代价高vue-cli：脚手架工具，帮助我们写好Vue.js基础代码的工具（目录结构、本地调试、代码部署、热加载、单元部署等）vue-router：管理页面路由vue-resource：Ajax通信webpack：编译生成浏览器可以识别的代码eslint：el6代码风格检查工具工程化，组件化，模块化优势：angular颠覆，依赖注入等概念学习曲线不平稳，react，jsx语法，react全家桶2333。vue借鉴了angular的指令和react的组件化思想 近年来前端开发趋势 旧浏览器逐渐淘汰：IE6-8不支持ES5 前端交互越来越多，功能越来越复杂 架构从传统的MVC向REST API + 前端MV*（MVC、MVP、MVVM）迁移 Vue.js的核心思想数据驱动： 运用directives指令对dom进行封装，数据发生改变，通知指令对dom进行相应的改变，dom是数据的一种自然映射 修改视图时，DOM Listeners监听，从而修改数据，从而实现数据的双向绑定 组件化：拓展html元素，封装可重用的代码 组件设计原则： 页面上每个独立的可视/可交互区域视为一个组件 每个逐渐对应一个工程目录，组件所需要的各种资源在这个目录下就近维护 页面不过是组件的容器，组件可以嵌套只有组合形成完整的页面 vue-cli安装安装vue1.0版本：vue init webpack#1.0 sell 其中webpack是模板中的一种，还可以替换成为browserify等Karma + Mocha单元测试用的npm installnpm run dev就可以访问了 项目运行入口文件：index.html vue的组件入口js：main.jsimport App from &#39;./App&#39; es6语法，&#39;./App&#39;相当于&#39;./App.vue&#39;通过new Vue实例化vue的一个实例1234new Vue(&#123; el: &apos;body&apos;, //element挂载点，挂在到body上 components: &#123; App &#125; //注册了App的组件； es6的简写&#125;) App.vue包含三个部分 123&lt;template&gt;&lt;/template&gt;&lt;script&gt;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 编写一个组件创建一个vue文件，vue下有三块，写好后在123export default&#123; data()&#123;&#125;&#125;导出,导出一个对象，里面就是vue的各种属性，vue是如何被定义的 使用一个组件先引用import Hello from &#39;./components/Hello&#39;然后注册12345export default &#123; components: &#123; Hello &#125;&#125; vue cli安装后的目录文件build，config：webpack配置相关node_modules：npm install 安装的依赖代码库src：存放项目源码static：存放第三方静态资源的.gitkeep文件代表如果这个目录为空，也把该目录提交到git仓库里面.babelrc：babel编译的配置文件，将es6（语法，方法）通过barbel编译成为es5。.editorconfig：代码风格.eslintignore：忽略对某些文件进行语法检查.eslintrc.js：eslint的配置文件.gitignore：不会提交到git仓库中 图片准备不同的尺寸适用于不同的场景同样的图片要有2x和3x图：devicePixelRatio设备像素比SVG矢量图，色彩单一的图片用svg，不单独使用，引用图标字体文件 制作图标字体在iconmoon网站上，上传svg图片，然后打包生成字体图标，生成的文件夹下有用的包括字体图标文件夹，和css样式文件 项目目录设计项目文件都在src文件夹下，删除assets文件夹，新建一个common文件夹作为公共资源目录，在其中创建stylus，js，fonts目录在components目录下细分组件 mock数据前后端分离，前端mock数据来模拟生产环境build/dev-server.js开发的打包用的webpack的入口文件，使用express()写的node server利用express的router来编写router请求先定义数据读取123456789101112131415161718192021222324252627var appData = require(&apos;../data.json&apos;);var goods = appData.goods;var seller = appData.seller;var ratings = appData.ratings;var apiRouters = express.Router();apiRouters.get(&apos;/goods&apos;, function (req, res) &#123; res.json(&#123; errno: 0, data: goods &#125;);&#125;);apiRouters.get(&apos;/seller&apos;, function(req, res) &#123; res.json(&#123; errno: 0, data: seller &#125;);&#125;);apiRouter.get(&apos;/ratings&apos;, function(req, res) &#123; res.json(&#123; errno: 0, data: ratings &#125;);&#125;);app.use(&apos;/api&apos;, apiRouter);]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[往事，如风]]></title>
    <url>%2F2017%2F03%2F15%2F%E5%BE%80%E4%BA%8B%EF%BC%8C%E5%A6%82%E9%A3%8E%2F</url>
    <content type="text"><![CDATA[你来，不管刮风下雨，我都去接你。你走，无论承诺几许，我都不送。 曾经知己已无悔，已共春风何必哀。 你和他，曾经是知己过，曾经说过很贴心的话，曾经发生过感动的泪流的事情，甚至曾经想过是一辈子的朋友，最好最好的那种。 但如今聊天就变了味道，说什么都嫌尴尬。 当时的感动都是真的，心里许下的诺言也是真的。现在的尴尬也是真的，渐行渐远的关系也是真的。 就像权利的游戏中的一句话，“当你害怕失去的时候，你就已经失去了它。”朋友是，恋人也是。 追忆，拉近关系也好；遗忘，刻意疏远也好，都是徒劳。 好在还在同一片明月之下，共享这朗朗春风，只是偶尔想起来，心底还是有小小的遗憾。 这种心情，大概是“一旦想起来一生中后悔的事情，梅花就落满南山”一样的淡淡落寞感。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>mood</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo中一些特殊标签的使用总结]]></title>
    <url>%2F2017%2F03%2F12%2Fhexo%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[学习无止境 看到一些童鞋blog中丰富的展示方式，就想学学，这个也是很容易忘记的东东，记录下，总结下，以便今后的复习使用。这个是官方的一些特殊使用方法 http://theme-next.iissnan.com/tag-plugins.html 文本居中的引用&lt;!-- 标签别名 --&gt; {% cq %} blah blah blah {% endcq %} 具体的效果就是这样的啦blah blah blah 突破容器宽度限制的图片&lt;!-- 别名 --&gt; {% fi /image-url, alt, title %} Bootstrap Callout{% note class_name %} Content (md partial supported) {% endnote %} {% note warning %}Content{% endnote %} 代码块和行内代码代码块在前面用一个tab就好了，行内代码用反引号就可以显示出来了在写这篇文章的过程中，我发现，如果不使用tab的方法形成代码块，而是使用hexo自带的codeblock方式创建代码块，展示风格不同，显示的竟然是html标签，不知为啥2333]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo-Next搭建个人博客]]></title>
    <url>%2F2017%2F03%2F11%2FHexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[感动，欣喜，积累 一、基本搭建步骤巨多文章已叙述的十分详尽，按照官网指示一步步来即可具体网址在页面底部就有哦git和nodejs安装新的就好了啦这哥们写的不错 二、部署步骤、常用命令、简写命令123456# clean没有简写$ hexo clean$ hexo g$ hexo d 1234567891011121314151617181920# 新建文章$ hexo new "postName" # 新建页面$ hexo new page "pageName" # 生成静态页面至public目录$ hexo generate# 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)$ hexo server # 项目部署$ hexo deploy # 查看帮助$ hexo help # 查看Hexo的版本$ hexo version 1234567$ hexo new == hexo n$ hexo generate == hexo g$ hexo server == hexo s$ hexo deploy == hexo d 三、bug处理方案可以借鉴下这个哥们blog的思路]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[域名的那些事儿]]></title>
    <url>%2F2017%2F03%2F10%2F%E5%9F%9F%E5%90%8D%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%2F</url>
    <content type="text"><![CDATA[看完了某人的blog之后，深觉生活不易，且行且珍惜吧 恩，其实我是不想一直使用github or coding的域名，索性就申请了自己的域名，￥19首年，还是可以接受的：leiger.me之后应该就将这个作为my blog的专属域名了吧，就设置成为顶级域名罢了 域名的认证这个就是购买一个新域名之后第一步需要完成的事情啦，否则域名解析无法正常使用在购买的地方（我在阿里云上买的）上传些个人身份信息就好 coding上的自定义域名官网上的描述方法 简单的来说，就是到自己域名的管理页面，增加一个CNAME记录CNAME：百度mark下,好多概念不熟啊啊啊 域名解析：就是购买的域名到IP地址的转换过程，个人认为不用购买阿里云的云解析DNS，什么鬼也不知道，差点上当了233 在coding的项目中添加自定义域名haha~ 大功告成！ github上自定义域名 第一步同上 如果我没有理解错的话，只需要将leiger.me在custiom domain中设置即可，www.leiger.me会定向到leiger.me上，而coding上要分别设定（没有详细的官方说明）github上的说明 在Github（国外）和coding（国内）同步管理leiger’s blog这样应该可以吧，一哥们的blog，写的不错，参考参考DNS测试结果：可以看到国外的IP就指向github了，国内的IP指向coding测试地址]]></content>
      <categories>
        <category>web</category>
        <category>blog</category>
      </categories>
      <tags>
        <tag>domain</tag>
        <tag>coding</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在github和coding上部署blog遇到的一些小问题]]></title>
    <url>%2F2017%2F03%2F10%2F%E5%9C%A8github%E5%92%8Ccoding%E4%B8%8A%E9%83%A8%E7%BD%B2blog%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[慢慢来嘛，问题总会解决的~ 昨天已经成功的部署到了github上，今天还想在coding上备份一个，结果遇到了不少问题QAQ 配置文件的书写方法这个哥们的blog上有写了一些方法官网上的方法1234567deploy:- type: git repo: git@github.com:leiger/leiger.github.io.git branch: master- type: git repo: git@git.coding.net:leiger/leiger.coding.me.git branch: master实测，这样写也是可以的。当然，第一种方法更加简洁，更好一些。 生成ssh的公钥原来已经有了一个公钥了的，在coding上成功添加之后，结果出现了ssh登陆提示”Host key verification failed.”的问题。妈呀，简直了，难道是github和coding上的公钥不能使用同一个？？（结果是可以的23333）于是乎，重新捡起了创建公私钥的一些基础命令。1$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;这个命令是什么鬼啊，应该可以在cmd中使用吧。然而2333，不存在该内部和外部命令？那我进入git的bin目录下总行了吧。可是仅仅只是可以执行，然后就没有然后了，懵逼ing。好吧，最终发现在git bash下就可以直接使用，让我静一静QAQ苦逼的时光仍在继续。 “Host key verification failed.”问题的解决这里给出了一个解决方案恩，说的很有道理，那就试试呗，开心的把known_hosts给删了，再次执行1hexo d的命令。喂，说好的没问题了呢QAQ，怎么还是一样2333没办法，github上的也deploy不了了，难道是有步骤漏了吗？终于，在github上找到了方法！这个是测试连接是否成功的方法，github上有完整的方法和命令通过1$ -T git@github.com 的方法，在known_hosts文件中添加了一个connection，之前的不是给我删了嘛，得创建一个新的才行。 Coding Pages的访问方法在github上还是比较容易的，直接将自己的项目名称设为leiger.github.io就大功告成了!coding上是这么写着的 Coding Pages 介绍可是，我将项目的名称设为[leiger.coding.me]竟然不好用？？竟然显示 404 site not found 也是醉了。原来，得在Pages服务中设置部署来源，这样就大功告成了！leiger.coding.me]]></content>
      <categories>
        <category>web</category>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>coding</tag>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面子工程？]]></title>
    <url>%2F2017%2F03%2F09%2F%E9%9D%A2%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%BF%85%E9%A1%BB%E5%BE%97%E5%81%9A%E5%A5%BD%2F</url>
    <content type="text"><![CDATA[男生护肤，其实是一种投资，一种健康的生活方式。太穷没钱护肤？不存在的。要好好的爱自己哦 在生活中，常常听到这样的声音： 男生还要护肤？？gay里gay气的… 对此，我只想说，what??丑死你活该的，哼 哈哈，言归正传，男生为什么要护肤呢？必须先革命思想才行，很多童鞋们有以下思想觉悟上的误区。有觉悟的直接跳过这段。 常见误区误区一：护肤多浪费时间啊对于那些以浪费时间为借口的人，究其根源，其实就是——懒。 你有好皮肤的基因吗？？（你有？滚。）你难道不希望看起来健康、年轻、阳光吗？？（想想林志颖和郭德纲23333）另外！你有女朋友吗？？你有女朋友吗？？你有男朋友吗？？？（蜜汁微笑脸） 我一直觉得，护肤是一件值得享受的事情。就像吃饭一样，慢慢品味食物的色香味带来的享受。看着自己一天天变好的皮肤，看着一点一点变得更加优秀的自己，这可以显著提升一个人的自信心。你特么少玩一盘LOL，王者农药，时间不就来了吗？ 误区二：护肤多浪费钱啊护肤是一种投资，这一点我是坚信不疑的。 有趣的经济学老头Daniel Hamermesh的研究表明，一个容貌低于平均值的人，每小时少赚9%的薪水；而容貌高于平均值的人每小时则多进账5%。（这是具有统计学意义的，别拿个例膈应自己和他人）。其实，你的脸真的很值钱…（好看当然不仅仅限于皮肤，但是若皮肤不好你还和我谈好看？？） 拥有良好外貌的人在职场、生活上都有无可比拟的优势。试想一下，同时找工作两个人，他们技术水平差不多，然而，一个满面油光，一个皮肤健康，若你是HR，你会要哪一个人呢？ 这TM都是一个看脸的社会啊… 另外，并不是越贵的护肤品越好用，适合是最重要的！毕竟作为学生党的我穷啊。以下推荐的产品都亲身使用过！！！价格都是可以接受的，平价还算公正。 咳咳，言归正传。 几点常识，和我一起念：护肤不分男女，护肤只看肤质，防晒最重要，皮肤问题严重的去医院！（这个时候护肤品救不了你了…） 男士护肤基础步骤： 【日间】洁面+水+精华（可选）+乳/面霜+防晒霜 【晚间】卸妆（可选项，有的防晒需卸妆）+洁面+水+精华（可选）+乳/面霜 预算不限的，入手一套lab series或者SKII 男士即可（认真脸） 以下为平价推荐，都是我亲身使用过的！ 流程 &amp;&amp; 产品一、 洁面对于洁面，要求：洗的干净，不紧绷，不假滑。 单单不紧绷这一条要求，可以和大部分皂基洗面奶say ByeBye了。典型的反面代表：欧莱雅，曼秀雷敦，妮维雅，可伶可俐等的男士线。皂基洗面奶的频繁使用容易破坏皮肤水油平衡，引发更严重的皮肤问题（都是泪啊，摔！），偶尔用用深度清洁下倒是没啥问题。 在这里推荐以下氨基酸洗面奶： 旁氏亮采净白系列米粹润白洁面乳 这款洗面奶是当之无愧国货精品，不到￥20的价格，温和不假滑，只是清洁力稍差，但和洁面扑一起使用之后，这就不成问题啦。 大宝（DaBao）水凝保湿洁面乳 这款洗面奶和旁氏米粹一样，价格便宜同样不到￥20，性价比巨高，淡淡的味道，就是包装low了点哈哈。 二、 水顾名思义，无论爽肤水，醒肤水，柔肤水，化妆水等，主要目的就是补水，只求无功无功即可。功能如美白，抗皱等就交给精华吧。 用水的时候强烈建议使用化妆棉！化妆棉可以起到二次清洁的作用，谁能保证你洗面奶洗干净了呢（滑稽），薄的化妆棉一点也不费水… MUJI 化妆水·敏感肌用 这款水已回购，无功无过，成分安全。但需注意的是，这款水分成舒爽型，滋润型，高保湿型三种。高保湿型挺腻的，上脸感觉不太好吸收，比较适合干皮或者冬天使用吧。油皮使用舒爽型即可。200ml价格￥60左右，MUJI专柜含税要70多。 宝拉珍选平衡化妆水 这款化妆水有淡淡的酸奶味甚是好闻，成分烟酰胺在成分表前列，良心，对于恢复肌肤屏障还是蛮有帮助的，200多ml我整整用了两大桶，肌肤状态改善肉眼可见。就是有时候上脸会有一些刺痛感（其他童鞋没这问题，黑人问号脸？？）化妆水价格JD活动售价￥130左右。 三、 精华（可选）精华的价格都普遍偏高，作为油皮亲妈的神仙水，有预算的同学入了总没错的，不过需要注意下是否会对其中的酵母成分过敏。 精华使用的确是可有可无的，在肌肤没有太大问题的情况下可以不用考虑，开启后的精华需要尽快使用，尤其是美白精华，若是有效成分被氧化，哭都来不及了。 OLAY Pro-X纯白方程式美白淡斑精华 作为平价版小灯泡，小白瓶的口碑是毋庸置疑的。 小白瓶建议使用美版的，和国版相比，美版烟酰胺浓度更高，同时价格更加便宜，美国亚马逊售价约为￥230左右。同样的，需要注意小白瓶也会有烟酰胺不耐受的情况出现，可以从小绿瓶开始使用。 前段时间小绿瓶升级改名了，就是水感透白的那款。耐受了之后，就可以充分的感受到烟酰胺这个物质的魅力！美白，淡化痘印都有帮助。若是过敏反应严重，还是停用烟酰胺吧，还有熊果苷，曲酸等其他成分的护肤品可以使用。 作为美白精华，这里吐槽一下乐敦CC的那款VC，效果先不说如何，简直太油了，柑橘味赞一个。但是糟糕的使用感虽然便宜但是不推荐。 题外话：若是有斑的话，医院的那款处方药叫做——氢琨软膏 可以试试，化学成分是对二苯酚，熊果苷就是由这个结构改造出来的，相比较之下，熊果苷安全稳定，不用避光。氢琨的使用谨遵医嘱！不可大面积使用，否则可能造成白斑，肤色不均等副作用！ 宝拉珍选2%水杨酸精华液 水杨酸是一种脂溶性的物质，仅锁定在皮肤浅表角质层，可以起到单纯治疗和阻断的作用，对于祛痘有一定的帮助。2%的浓度已经算是水杨酸算是添加到护肤品中的上限了，属于刷酸的范畴，使用起来溶解角质，祛黑头效果良好。 但是，这款精华有一个最大的缺点，那就是，油！30ml（￥80左右）买来半年多还剩一小半，使用感欠佳…若不太在意这点的可以入，毕竟效果还成。注意不可与维A酸，他扎罗汀，达芙文等一起使用，即使你是城墙皮（严肃脸），否则你会后悔的（让我哭一会儿）。 四、 乳液因为我是油性皮肤，面霜就不考虑了，平时都用乳液或者芦荟胶，话说芦荟胶到底属于哪类啊啊啊，不管，就算乳液了。 补水了之后一定得用乳液哦喂，乳液起到的是保湿的作用，若只补水不保湿，脸上的水分很快就蒸发了。 大宝SOD蜜 惊不惊喜，意不意外？可是这个真的挺好用的啊，便宜大罐随便撸。同系列产品，SOD蜜，SOD蛋白蜜，清爽保湿乳都用过，效果都大同小异。只是蛋白蜜那款浓了点，价格贵了点，将近￥20，适合冬天使用。据某实验室分光光度计实验，里面超氧歧化酶是有活性的，抗氧化基本可靠。只是，大宝成分中含有矿物油，可能会闷痘。 但作为中国男士颜值的最后一道防线，这性价比，这使用感，值得歌颂一番了。虽现在已不是国货（被强生收购），但是在中国还是超级良心的啊，美国亚马逊一瓶可要近百元，出国后用不起了…丝塔芙和大宝还是没法比的（勿喷，个人观点）。 完美芦荟胶 完美芦荟胶到目前为止应该用了超过10支了吧。总体来说无功无过，价格优势在那里，厚厚的涂一层也不心疼，兼具补水与保湿的功能，官网￥38一支。据说优秀的芦荟胶可以吃？？这款假货超多，购买需在正规渠道。 五、 防晒霜若是在所有的护肤程序中选择一个，当然是选择防晒啊。防晒的重要性不言而喻。 紫外线根据波长不同分成UVA（长波紫外线，可引起晒黑衰老皱纹，穿透性巨强，可达真皮层，也是阴天防晒的依据所在），UVB（中长波紫外线，可引起晒伤晒红），UVC（臭氧层帮我们挡掉啦，不必在意）。 安耐晒小金瓶 这款网红防晒霜真的是红的绘色绘色，有理有据。咳咳，高倍防晒加上轻薄的使用感，妥妥的成为我防晒霜使用历史的No.1。据说可以与之媲美的是白蕾丝，也算是种草了吧。小金瓶使用起来不泛白（作为物化集一身的防晒这样可以了），好推，丝滑柔顺的体验，晒不黑，也不反光，不用专门卸妆。就是味道有点诡异，价格是劣势，专柜￥240 50ml，代购￥180 平价替代品好难找啊，郁美净？碧柔？ 与之相反的大宝清爽防晒，出去玩一趟，半小时擦一次还是晒黑了…脸上还反光，摔！不过作为身体的一般防晒还是可以的，毕竟价格优势，质地也还算轻薄。不过大宝这款化学防晒中有二苯酮（潜在致癌性？）这个物质，在意的就算了。 雅漾防晒喷雾 就是这货，是我现在的身体防晒喷雾。也不能说是推荐吧，毕竟不会回购。可以用两个夏天吧….巨大一瓶。味道太香了，涂在身上有润白效果，有点油腻，不防水，比同款小金刚据说差多了…价格非官网￥180。正在寻找替代品。 终于写完了，仰天长叹一声。 全部走一套下来（不包括精华），总价格简直良心啊！ 最后，我想说 祝每个男生都可以变得帅帅的！ 版权所有，转载请注明地址!]]></content>
      <categories>
        <category>生活方式</category>
      </categories>
      <tags>
        <tag>skin-care</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown]]></title>
    <url>%2F2017%2F02%2F28%2Fmarkdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[知乎安利装了一个cmd markdown， 拔草拔草！ mark下以后查找就比较方便啦 http://wowubuntu.com/markdown/#hr这个是官方的一些特殊使用方法 https://hexo.io/zh-cn/docs/tag-plugins.html 最近更新时间：2017-03-12当写了几天的博客之后，发现自己对于MARKDOWN的学习还远远不够，之前的理解过于片面，于是对本篇博文进行更新。另，在Markdown的语法中选择了一些自认为好用简单的书写方式，对于相同效果的表达方式不再赘述。以下正文 一、为什么要有markdown呢？他和html之间有啥关联呢？1.markdown宗旨Markdown的目标是易读易写 2.兼容HTMLMARKDOWN语法的目标是：成为一种适用于网络的书写语言Markdown是一种书写的格式，而Html是一种发布的格式HTML可以直接在Markdown文档中书写，不需要额外的标注 Html区块元素一些HTML的区块元素，必须在前后加上空行与其他内容隔开，还要求开始标签与结尾标签不能用制表符或空格来缩进在Html区块中的Markdown格式语法将不会被处理 Html行内标签可以在Markdown里随意使用 二、Markdown语法1.段落和换行普通的段落不该用空格或制表符来缩进！！ 2.斜体和粗体使用*和**表示斜体和粗体。e.g 斜体，粗体。 3.分级标题使用#表示一级标题，使用##表示二级标题 4.外链接使用 \[描述](链接地址)为文字增加外链接。leiger’s blog 5.列表无序列表使用*、+、-作为列表标记 无序列表 无序列表 这个用的是1. 有序列表 有序列表不用在意列表数字的正确性，haha 6.区块引用Blockquotes在每行的最前面加上&gt; 哦 床前明月光，下一句是啥23333 可以嵌套使用，只要根据层次加上不同数量的&gt; 7.代码块 行内代码块使用的是反引号 代码块 这个代码块的左边有四个不可见的空格哦 8.插入图像使用 ![描述](图片地址链接)插入图像 9.分割线使用三个以上的*号 10.特殊字符自动转换两个特殊的字符&lt; 和&amp;遇到再说吧]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA["Javascript"学习笔记之--语法]]></title>
    <url>%2F2017%2F01%2F04%2FJavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[其实，JavaScript语法就那么点东西… 一、 基本语法1. 变量 变量的申明和赋值是两个步骤，只不过我们一般写到了一起。 JavaScript是一种动态类型语言，也就是说，变量的类型没有限制 变量提升（hoisting）：JavaScript会扫描整个函数体的语句，把所有申明的变量提升到函数顶部 标识符（identifier）：大小写英文，数字，$，_ 的组合，不能数字开头，不能是关键字，区分大小写 var作用域是函数体，并不是必须用var申明 在for等语句块中定义局部作用域的变量得使用ES6的中let 常量可以全部大写来表示，ES6中有const 不在函数体内的变量就有全局作用域。JavaScript的全局作用域被绑定到window（全局对象）的一个属性 在函数内部，没有用var申明的变量，也是全局变量 为了避免顶层函数的命名冲突，可以将自己的所有变量和函数绑定到一个全局变量中，JQuery就是这么做的 2. 区块： 大括号包起来的 在ES6中编写有一定意义（let, const是块级作用域） 3. 三元运算符： ？：1(condition) ? expr1 : expr2 4. break和continue: break用于终止跳出循环 continue用于终止本轮循环，返回循环结构的头部 若是多重循环，不带参数的break和continue都只针对最内层的循环 5. 标签（label）： 标签相当于定位符，用于跳转到程序的任意位置12Label： statement 二、 数据类型JavaScript一共有七种数据类型，在ES5标准中有六种，它们分别是： Number String Boolean Undefined Null Object 三、 Number 所有数字都是以64位浮点数形式存储的，即使整数也是如此 11 === 1.0 浮点数不是精确的值,应该计算他们的之差的绝对值，看是否小于某个阈值 120.1 + 0.2 === 0.3 //falseMath.abs(1/3 - (1 - 2/3)) &lt; 0.0000001 JavaScript提供的数值范围有限，太大返回Infinity。Infinity有正负之分，两者不相等 各种进制JavaScript最终都会转成10进制 NaN（Not a number）,主要出现在将字符串解析成数字出错的场合。NaN不等于任何值，包括它本身。用isNaN(NaN)来判断，但是得注意非数字都是返回true 0/0返回NaN，非0数值除以0返回Infinity parseInt(‘123’)用于将字符串转为整数。 这个是一个个字符依次转换，遇到不能转的返回已经转好的部分 1parseInt('8a') //8 不能转，则返回NaN。 对于那些会自动转为科学计数法的数字，parseInt会将科学计数法表示方法视为字符串，结果诡异 parseInt(‘1000’, 16)的第二个参数默认为10，其他可以进行进制转换，返回结果是10进制的1parseFloat('3.14') 四、 String 单引号中用单引号，要加\来转义 转义字符各种神奇 字符串可以视为字符数组，因此可以使用数组的方括号运算符s[0] 字符串是只读的，改变数组的方法对它无效 .length返回字符串的长度，无法改变 JavaScript使用Unicode字符集存储，并且还允许在程序中使用Unicode编号表示字符，即写成\uxxxx形式 Base64转码：一种编码方式，可以将任意字符转成可打印字符 btoa(): 字符串或二进制值转为Base64编码 atob(): Base64编码转为原来的编码 ES6中的多行字符串`` ES6中的模板字符串var message = 你好，${name};123S.toUpperCase(); s.toLowerCase()S.indexOf('hello') 没有返回-1S.substring(0, 5) //substring都是小写的 五、 Boolean Undefined，null，false，0，NaN，“”自动转化为false 空对象和空数组对应的布尔值是true true和false都是小写的 六、 Null 和undefined超级像，typeof的时候是object 七、 Object1. 狭义的Object 创建object有三种办法 键名为数字会自动转为字符串，键名不符合标识条件，要加上引号 如果一个属性（property）的值为函数，成这个属性为方法，像函数一样调用 对于对象而言，指向同一地址的两个变量，修改一个变量，另一个也会更改 读取属性： 点运算符 括号运算符，键名需要放在引号里面，否则会被当做变量处理 在浏览器环境中，所有全局变量都是window对象的属性 查看一个对象本身的所有属性，可以使用Object.keys方法 delete用于删除对象的属性，删除成功后返回true in运算符用于检查对象是否包含某个属性，如果包含就返回true。 若直接用window.x来判断，则可能不对，因为x的值若对应的是空字符串等就无法得到正常结果 in不能识别对象是继承的属性还是本身的属性，若需要识别自身的属性使用hasOwnPropertyFor…in循环用来遍历一个对象的全部属性，不仅遍历自身的，还遍历继承的属性。但是要求这些对象是可遍历的属性，会跳过不可遍历的属性 2. Array typeof运算符认为数组的类型就是对象 Object.keys(arr)返回的是数组的键名，就是0、1、2.. length属性，将数组清空的一个办法是将length属性设为0 类似数组的对象（array-like object）本质上还是对象，只是所有的键名都是正整数，有length属性，但是这个length属性不是动态值。包括函数arguments对象，大多数DOM元素集，还有字符串 In运算符适用于对象，也适用于数组 数组遍历可以用for…in（会遍历到非整数键），推荐使用for循环或者forEach方法 1Colors.forEach(function(color)&#123; console.log(color); &#125;) 使用delete命令删除一个数组成员，会形成空位，但不会影响length属性 Arr[1] = 1 //和字符串不同，对超出范围的索引赋值也会改变array的大小 Arr.indexOf(10) Arr.slice(0, 3) //对应String的substring()版本，返回一个新的array 末尾操作 arr.push(1, 2), arr.pop() 开头操作 arr.unshift(1, 2), arr.shift() Arr.sort() //白痴排序 Arr.reverse() Arr.spice(2, 3, ‘Google’, ‘Facebook’) //万能方法，删除+添加 Arr.concat([1, 2, 3]) //连接两个array，返回一个新的arr，没有修改原来的 Arr.join(‘-‘) //把当前array的每个元素都用指定的字符串连接起来，返回连接后的字符串 多维数组 3. function 函数的声明 function命令 1function print(s)&#123;console.log(s)&#125; 函数表达式，也就是匿名函数。若这个函数加一个函数名，则这个函数名只能在函数体中使用 1var print = function(s)&#123;console.log(s)&#125;; 若函数重复声明，后面的会覆盖前面的 函数名的提升 JavaScript引擎将函数名视为变量名，采用function命令声明函数时，整个函数会像变量声明一样，被提升到代码头部。采用赋值语句定义时会报错 函数的属性和方法 name属性，返回的就是function关键字之后的那个函数名，匿名函数返回空字符串 length属性，返回定义时参数的个数，无论输入了多少个参数 函数作用域 全局作用域，变量在整个程序中一直存在，所有地方都可以读取；函数作用域，变量只能在函数内部存在 函数内部变量提升 传递方式 函数参数若是原始类型的值（数字、字符串、布尔值），传递方式是传值传递，在函数体内修改参数值，不会影响到函数外部 但是，函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递，会影响到原始值。对象赋新值不会影响 arguments对象 arguments对象包含了函数运行时的所有参数，它是一个类似数组的对象，在非箭头函数中使用 这是一个默认参数，直接使用即可 闭包 闭包就是通过在函数中定义函数，来读取父函数内部的变量，这是由于函数作用域决定的 闭包的好处：读取函数内部的变量，让这些变量始终保存在内存中，封装对象的私有属性和私有方法 立即调用函数表达式 1(function()&#123; &#125;()); (function()&#123;&#125;)(); 通常情况下，只对匿名函数使用立即执行的函数表达式 目的：不必为函数命名，避免了污染全局变量；封装一些外部无法读取的私有变量 八、 确定数据类型的方法 typeof运算符 函数返回function undefined返回undefined：这点可用于检查变量是否被申明 typeof v Array，object，null返回object instanceof运算符 可以用于区分array和object o instanceof Array Object.prototype.toString方法]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
